# =================================================================
# docker-compose.yml - API Server Configuration
# =================================================================
# 
# ðŸš€ API SERVER SERVICES:
# - Trading API (FastAPI)
# - Background Workers (Celery)
# - Message Queue (Redis)
# - Main Database (PostgreSQL)
# - Trading Data Cache (Redis)
# - Market Data Services
# - Risk Management Services
# 
# ðŸ’° OPTIMIZED FOR: g6-standard-2 ($12/month)
# - 4GB RAM, 2 CPU
# - High-performance data processing
# 
# =================================================================

# =================================================================
# NETWORKS
# =================================================================
networks:
  api-network:
    driver: bridge
    name: fks-api-network
  # External network for auth communication
  external:
    external: true
    name: fks-external

# =================================================================
# VOLUMES
# =================================================================
volumes:
  postgres_data:
    name: fks_api_postgres_data
  redis_data:
    name: fks_api_redis_data
  redis_cache_data:
    name: fks_api_redis_cache_data
  trading_data:
    name: fks_api_trading_data
  model_data:
    name: fks_api_model_data
  logs_data:
    name: fks_api_logs_data
  backups:
    name: fks_api_backups

# =================================================================
# COMMON CONFIGURATIONS
# =================================================================
x-common-env: &common-env
  TZ: ${TZ:-America/Toronto}
  DOMAIN_NAME: ${API_DOMAIN_NAME:-api.fkstrading.xyz}
  
x-database-env: &database-env
  <<: *common-env
  DATABASE_URL: postgresql://${POSTGRES_USER:-fks_user}:${POSTGRES_PASSWORD:-fks_secure_pass_2024!}@postgres:5432/${POSTGRES_DB:-fks_trading}
  
x-redis-env: &redis-env
  <<: *common-env
  REDIS_URL: redis://redis:6379/0
  CACHE_REDIS_URL: redis://redis-cache:6379/0

x-trading-env: &trading-env
  # Database Configuration
  DATABASE_URL: postgresql://${POSTGRES_USER:-fks_user}:${POSTGRES_PASSWORD:-fks_secure_pass_2024!}@postgres:5432/${POSTGRES_DB:-fks_trading}
  # Redis Configuration
  REDIS_URL: redis://redis:6379/0
  CACHE_REDIS_URL: redis://redis-cache:6379/0
  # Timezone
  TZ: ${TZ:-America/Toronto}
  DOMAIN_NAME: ${API_DOMAIN_NAME:-api.fkstrading.xyz}
  # Rithmic API Configuration
  RITHMIC_USER: ${RITHMIC_USER}
  RITHMIC_PASSWORD: ${RITHMIC_PASSWORD}
  RITHMIC_SYSTEM_NAME: ${RITHMIC_SYSTEM_NAME:-Rithmic Paper Trading}
  RITHMIC_EXCHANGE: ${RITHMIC_EXCHANGE:-CME}
  # Trading Configuration
  TRADING_ENABLED: ${TRADING_ENABLED:-false}
  PAPER_TRADING: ${PAPER_TRADING:-true}
  MAX_POSITION_SIZE: ${MAX_POSITION_SIZE:-10}
  RISK_LIMIT_PERCENT: ${RISK_LIMIT_PERCENT:-2.0}
  # API Configuration
  API_HOST: 0.0.0.0
  API_PORT: 8000
  API_WORKERS: 2
  # Auth Server
  AUTHELIA_URL: ${AUTHELIA_URL:-https://auth.fkstrading.xyz}
  AUTHELIA_CLIENT_ID: ${AUTHELIA_CLIENT_ID}
  AUTHELIA_CLIENT_SECRET: ${AUTHELIA_CLIENT_SECRET}

x-healthcheck: &healthcheck
  interval: 30s
  timeout: 15s
  retries: 3
  start_period: 60s

x-logging: &logging
  driver: json-file
  options:
    max-size: "100m"
    max-file: "3"

# =================================================================
# SERVICES
# =================================================================
services:
  # =================================================================
  # PostgreSQL Database
  # =================================================================
  postgres:
    image: postgres:15-alpine
    container_name: fks_api_postgres
    restart: unless-stopped
    networks:
      - api-network
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/sql/init:/docker-entrypoint-initdb.d:ro
      - backups:/backups
    environment:
      <<: *common-env
      POSTGRES_USER: ${POSTGRES_USER:-fks_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fks_secure_pass_2024!}
      POSTGRES_DB: ${POSTGRES_DB:-fks_trading}
      # Performance optimizations
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fks_user} -d ${POSTGRES_DB:-fks_trading}"]
      <<: *healthcheck
    logging: *logging
    # Resource limits for $12 server
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 512M

  # =================================================================
  # Redis (Primary - Queue & Sessions)
  # =================================================================
  redis:
    image: redis:7-alpine
    container_name: fks_api_redis
    restart: unless-stopped
    networks:
      - api-network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      <<: *common-env
    command: >
      redis-server
      --save 300 1
      --loglevel warning
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *healthcheck
    logging: *logging
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # =================================================================
  # Redis Cache (Secondary - Fast Cache)
  # =================================================================
  redis-cache:
    image: redis:7-alpine
    container_name: fks_api_redis_cache
    restart: unless-stopped
    networks:
      - api-network
    volumes:
      - redis_cache_data:/data
    environment:
      <<: *common-env
    command: >
      redis-server
      --save ""
      --loglevel warning
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *healthcheck
    logging: *logging
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # =================================================================
  # Trading API Server
  # =================================================================
  api:
    image: ${DOCKER_REGISTRY:-fkstrading}/fks-api:${API_VERSION:-latest}
    container_name: fks_api_server
    restart: unless-stopped
    networks:
      - api-network
      - external
    ports:
      - "8000:8000"
    volumes:
      - trading_data:/app/data
      - model_data:/app/models
      - logs_data:/app/logs
      - ./config/app:/app/config:ro
    environment:
      <<: *trading-env
      SERVICE_TYPE: api
      WORKERS: 2
      # API-specific settings
      ENABLE_DOCS: ${ENABLE_API_DOCS:-true}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      LOG_LEVEL: ${API_LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      <<: *healthcheck
    logging: *logging
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # =================================================================
  # Celery Worker (Background Tasks)
  # =================================================================
  worker:
    image: ${DOCKER_REGISTRY:-fkstrading}/fks-api:${API_VERSION:-latest}
    container_name: fks_api_worker
    restart: unless-stopped
    networks:
      - api-network
    volumes:
      - trading_data:/app/data
      - model_data:/app/models
      - logs_data:/app/logs
      - ./config/app:/app/config:ro
    environment:
      <<: *trading-env
      SERVICE_TYPE: worker
      WORKER_CONCURRENCY: 2
      WORKER_QUEUES: default,trading,analysis,model_training
      # Worker-specific settings
      CELERY_LOG_LEVEL: ${WORKER_LOG_LEVEL:-INFO}
      WORKER_PREFETCH_MULTIPLIER: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      celery -A app.celery worker 
      --loglevel=info 
      --concurrency=2 
      --prefetch-multiplier=1 
      --queues=default,trading,analysis,model_training
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery", "inspect", "ping"]
      <<: *healthcheck
    logging: *logging
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # =================================================================
  # Celery Beat (Scheduler)
  # =================================================================
  scheduler:
    image: ${DOCKER_REGISTRY:-fkstrading}/fks-api:${API_VERSION:-latest}
    container_name: fks_api_scheduler
    restart: unless-stopped
    networks:
      - api-network
    volumes:
      - trading_data:/app/data
      - logs_data:/app/logs
      - ./config/app:/app/config:ro
    environment:
      <<: *trading-env
      SERVICE_TYPE: scheduler
      # Scheduler-specific settings
      CELERY_LOG_LEVEL: ${SCHEDULER_LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      celery -A app.celery beat 
      --loglevel=info 
      --scheduler=django_celery_beat.schedulers:DatabaseScheduler
    logging: *logging
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # =================================================================
  # Market Data Service
  # =================================================================
  market-data:
    image: ${DOCKER_REGISTRY:-fkstrading}/fks-market-data:${MARKET_DATA_VERSION:-latest}
    container_name: fks_api_market_data
    restart: unless-stopped
    networks:
      - api-network
    volumes:
      - trading_data:/app/data
      - logs_data:/app/logs
      - ./config/market:/app/config:ro
    environment:
      <<: *trading-env
      SERVICE_TYPE: market_data
      # Market data specific
      MARKET_DATA_SOURCES: rithmic,polygon,alpha_vantage
      RITHMIC_FEED_TYPE: ${RITHMIC_FEED_TYPE:-delayed}
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      # Performance settings
      MAX_SYMBOLS: 100
      UPDATE_INTERVAL: 1
      BATCH_SIZE: 50
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      <<: *healthcheck
    logging: *logging
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # =================================================================
  # Risk Management Service
  # =================================================================
  risk-manager:
    image: ${DOCKER_REGISTRY:-fkstrading}/fks-risk:${RISK_VERSION:-latest}
    container_name: fks_api_risk
    restart: unless-stopped
    networks:
      - api-network
    volumes:
      - trading_data:/app/data
      - logs_data:/app/logs
      - ./config/risk:/app/config:ro
    environment:
      <<: *trading-env
      SERVICE_TYPE: risk_management
      # Risk management specific
      MAX_DAILY_LOSS: ${MAX_DAILY_LOSS:-1000}
      MAX_POSITION_VALUE: ${MAX_POSITION_VALUE:-50000}
      RISK_CHECK_INTERVAL: 5
      ENABLE_CIRCUIT_BREAKER: ${ENABLE_CIRCUIT_BREAKER:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      <<: *healthcheck
    logging: *logging
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # =================================================================
  # Database Backup Service
  # =================================================================
  db-backup:
    image: postgres:15-alpine
    container_name: fks_api_backup
    restart: "no"
    networks:
      - api-network
    volumes:
      - backups:/backups
    environment:
      <<: *database-env
    command: >
      sh -c "
        echo 'Creating database backup...'
        pg_dump -h postgres -U ${POSTGRES_USER:-fks_user} -d ${POSTGRES_DB:-fks_trading} > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
        echo 'Cleaning old backups (keeping last 7 days)...'
        find /backups -name 'backup_*.sql' -mtime +7 -delete
        echo 'Backup completed!'
      "
    depends_on:
      - postgres
    profiles:
      - backup

# =================================================================
# MONITORING & HEALTH CHECKS
# =================================================================
# Health check all services: 
# docker-compose -f docker-compose.api.yml ps --services | xargs -I {} docker-compose -f docker-compose.api.yml exec {} curl -f http://localhost:8000/health || echo "{} health check failed"
