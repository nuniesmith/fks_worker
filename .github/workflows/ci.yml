name: CI

on:
  push:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Cache mypy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ matrix.python-version }}-${{ hashFiles('mypy.ini', 'requirements.dev.txt') }}
      - name: Install lint deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.dev.txt
      - name: Ruff check
        run: ruff check . | tee ruff.txt
      - name: Ruff format (diff only)
        run: ruff format --check . || true
      - name: Mypy
        run: mypy src | tee mypy.txt || true
      - name: Upload lint artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-logs-${{ matrix.python-version }}
          path: |
            ruff.txt
            mypy.txt
            .mypy_cache
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONDEVMODE: '1'
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install deps (minimal)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi
      - name: Legacy import guard
        run: python .github/scripts/check_legacy_imports.py
      - name: Run tests
        run: |
          coverage run -m pytest -q || coverage run -m pytest -q -k "not slow"
      - name: Coverage report
        if: always()
        run: |
          coverage xml -o coverage.xml || true
          coverage report || true
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: |
            coverage.xml
            .coverage

  coverage-aggregate:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install coverage
        run: |
          python -m pip install --upgrade pip
          pip install coverage
      - name: Download coverage artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: coverage-*
          path: coverage_parts
      - name: Combine coverage
        run: |
          ls -R coverage_parts || true
          find coverage_parts -name '.coverage' -exec bash -c 'i=0; for f in "$@"; do cp "$f" ".coverage.$((i++))"; done' _ {} +
          ls -1 .coverage.* || echo 'No .coverage parts found'
          if ls .coverage.* 1> /dev/null 2>&1; then
            coverage combine || true
            coverage xml -o coverage-combined.xml || true
            coverage report || true
          fi
      - name: Coverage threshold check
        env:
          COVERAGE_FILE: coverage-combined.xml
        run: |
          python .github/scripts/coverage_check.py --percent-file coverage_percent.txt || true
      - name: Upload coverage percent artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-percent
          path: coverage_percent.txt
      - name: Upload combined coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-combined
          path: coverage-combined.xml
