name: fks_worker CI

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'poetry.lock'
      - 'pyproject.toml'
      - 'Dockerfile'
      - 'Dockerfile.simple'
      - '.github/workflows/fks_worker-ci.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'poetry.lock'
      - 'pyproject.toml'
      - 'Dockerfile'
      - 'Dockerfile.simple'
      - '.github/workflows/fks_worker-ci.yml'
  workflow_dispatch: {}

jobs:
  test:
    name: Unit Tests (Python)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: 'true'  # Ensure shared_python submodule is checked out
          
      - name: Verify shared_python dependency
        run: |
          if [ ! -d "shared_python" ] && [ -f ".gitmodules" ]; then
            echo "shared_python not found but .gitmodules exists, attempting to initialize submodules"
            git submodule update --init --recursive
          fi
          ls -la shared_python/ || echo "shared_python directory not available"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
          # Note: shared_python is added to PYTHONPATH in test steps instead of installing as editable package

      - name: Install project
        run: poetry install --no-interaction

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}/shared_python
        run: |
          if [ -d "src/tests" ]; then
            poetry run pytest src/tests/ -q --maxfail=1 --disable-warnings --color=yes
          elif [ -d "tests" ]; then
            poetry run pytest tests/ -q --maxfail=1 --disable-warnings --color=yes
          else
            echo "No tests directory found, running basic import test"
            poetry run python -c "import sys; sys.path.append('src'); import main; print('Basic import successful')"
          fi

      - name: Upload test results (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-cache
          path: .pytest_cache
          if-no-files-found: ignore

  docker-build:
    name: Docker Build (fks_worker)
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: 'true'  # Ensure shared_python submodule is checked out

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: (Optional) Log in to DockerHub
        if: ${{ env.DOCKER_USERNAME != '' && env.DOCKER_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_USERNAME != '' && format('{0}/fks_worker', env.DOCKER_USERNAME) || 'local/fks_worker' }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.simple
          push: ${{ env.DOCKER_USERNAME != '' && env.DOCKER_TOKEN != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SERVICE_RUNTIME=python
            SERVICE_TYPE=worker
            BUILD_TYPE=cpu

      - name: Run container smoke test
        run: |
          # Get the first tag from the metadata output
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          docker run --rm --name fks_worker_test "$IMAGE_TAG" python -c "import sys; sys.path.append('/app/src'); import main; print('fks_worker module imported successfully')" || echo 'Basic container test completed'

      - name: Export image artifact (no push scenario)
        if: ${{ env.DOCKER_USERNAME == '' || env.DOCKER_TOKEN == '' }}
        run: |
          # Get the first tag from the metadata output
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          docker save "$IMAGE_TAG" | gzip > fks_worker-image.tar.gz
        
      - name: Upload image artifact
        if: ${{ env.DOCKER_USERNAME == '' || env.DOCKER_TOKEN == '' }}
        uses: actions/upload-artifact@v4
        with:
          name: fks_worker-image
          path: fks_worker-image.tar.gz
